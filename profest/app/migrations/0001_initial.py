# Generated by Django 5.0 on 2023-12-13 10:38

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


def add_to_botsettings(apps, schema_editor):
    botsettings = apps.get_model('app', 'BotSettings')
    result = botsettings.objects.create(
        start_text='',
        stiker_text='',
        subscribe_text='',
        remind_text='',
        link_text='',
        rate_text='',
        review_text='',
        bot_link='',
    )


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('count', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='BotMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=500)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='BotSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_text', models.CharField(default='', max_length=800)),
                ('stiker_text', models.CharField(default='', max_length=800)),
                ('subscribe_text', models.CharField(default='', max_length=800)),
                ('remind_text', models.CharField(default='', max_length=800)),
                ('link_text', models.CharField(default='', max_length=800)),
                ('rate_text', models.CharField(default='', max_length=800)),
                ('review_text', models.CharField(default='', max_length=800)),
                ('bot_link', models.CharField(default='', max_length=200)),
            ],
        ),
        migrations.RunPython(add_to_botsettings, reverse_code=migrations.RunPython.noop),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.CharField(max_length=500)),
                ('date', models.DateField()),
                ('start_time', models.TimeField()),
                ('finish_time', models.TimeField()),
                ('link', models.CharField(blank=True, max_length=500)),
                ('status', models.IntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='Visitor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fio', models.CharField(blank=True, max_length=255)),
                ('age', models.PositiveIntegerField(default=0)),
                ('city', models.CharField(blank=True, max_length=255)),
                ('phone', models.CharField(blank=True, max_length=15)),
                ('telegram', models.CharField(blank=True, max_length=35)),
                ('profession', models.CharField(blank=True, max_length=255)),
                ('experience', models.CharField(blank=True, max_length=255)),
                ('monthly_income', models.PositiveIntegerField(default=0)),
                ('hourly_income', models.PositiveIntegerField(default=0)),
                ('visit_date', models.DateTimeField(auto_now_add=True)),
                ('referrer', models.CharField(blank=True, max_length=255)),
                ('visit_duration', models.PositiveIntegerField(default=0)),
                ('device', models.CharField(choices=[('M', 'M'), ('D', 'D')], default='D', max_length=1)),
                ('want_event', models.CharField(choices=[('Y', 'Хочет участвовать'), ('N', 'Не заинтересовало')], default='Y', max_length=1)),
                ('status', models.IntegerField(default=1)),
                ('telegram_user_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('note', models.CharField(blank=True, max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telegram', models.CharField(blank=True, max_length=35)),
                ('telegram_user_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('report', models.IntegerField(default=0)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EventRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rate', models.IntegerField(default=0)),
                ('text', models.CharField(max_length=500)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.event')),
                ('visitor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.visitor')),
            ],
        ),
        migrations.CreateModel(
            name='VisitorEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.event')),
                ('visitor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.visitor')),
            ],
        ),
        migrations.AddField(
            model_name='visitor',
            name='event',
            field=models.ManyToManyField(blank=True, related_name='vevent', through='app.VisitorEvent', to='app.event'),
        ),
    ]
